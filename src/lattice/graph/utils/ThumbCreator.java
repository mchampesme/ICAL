/*
 ***********************************************************************
 * Copyright (C) 2004 The Galicia Team 
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA; or visit the following url:
 * http://www.gnu.org/copyleft/lesser.html
 *
 ***********************************************************************
 */

package lattice.graph.utils;//import javaimport java.awt.Component;import java.awt.Image;/**	* Permet de créer une image réduite	* @author David Grosser	* @Date 10 Janvier 2001*/public class ThumbCreator extends Component implements Runnable {	protected boolean qualite = false; // pour la qualite des images réduites. Attention, a true ca demande beaucoup de temps	protected int width, height;	protected Image img;	protected String nomFich;	protected ThumbReceiver iReceiver;	protected boolean calcImg = false; // Pour indiquer si l'image réduite a déjà été créée	protected boolean calcImgRed = false; // Pour indiquer que le bouton a déjà été créé	protected Image imgRed;// L'image réduite calculée	protected int index = -1;	protected boolean invalide = false; // true si probl?me de chargement de l'image	protected Resources rl;	protected String path;	//protected Thread monThread; // Le Thread qui se charge de gérer le calcul	//protected static int nbThum = 0;	//protected int thisnbThumb;// Constructeur	public ThumbCreator(ThumbReceiver ir, Image img, String nomFich, int width, int height) {		iReceiver = ir;		this.img = img;		this.width = width;		this.height = height;		this.nomFich = nomFich;		//init();	}	public ThumbCreator(ThumbReceiver ir, Image img, String nomFich, int width, int height, int index) {		iReceiver = ir;		this.img = img;		this.width = width;		this.height = height;		this.nomFich = nomFich;		this.index = index;		//init();	}	public ThumbCreator(ThumbReceiver ir, Image img, String nomFich, int width, int height, boolean qualite) {		this.qualite = qualite;		iReceiver = ir;		this.img = img;		this.width = width;		this.height = height;		this.nomFich = nomFich;		//init();	}	public ThumbCreator(ThumbReceiver ir, Image img, String nomFich, int width, int height, int index, boolean qualite) {		this.qualite = qualite;		iReceiver = ir;		this.img = img;		this.width = width;		this.height = height;		this.nomFich = nomFich;		this.index = index;		//init();	}	public ThumbCreator(ThumbReceiver ir, Image img, String nomFich, String path, int width, int height, int index, boolean qualite, Resources rl) {		this(ir, img, nomFich, width, height, index, qualite);		this.path = path;		this.rl = rl;	}/**	* Retourne la qualite de calcul des Thumbs*/	public boolean getQualite() {		return qualite;	}/**	* Modification de la qualite de calcul des Thumbs*/	public void setQualite(boolean q) {		this.qualite = q;	}/**	* Initialisation et lancement du calcul*/	public void run() {		//System.out.println("run");		//nbThum += 1;		//thisnbThumb = nbThum;		//System.out.println(nbThum);		try {                  if(img != null) {			//int h = img.getHeight(this);// Pour déclencher imageUpdate			if(img.getHeight(this) > 0) updateThumb(img);// Si h est différent de 0 (déja chargée), imageUpdate n'est pas déclenchée, il faut appeler updateThumb "à la main"		  }		  else updateThumb(Resources.getStaticImage("Invalidelogo.jpg"));                } catch(NullPointerException e) {System.out.println("Attention, certaines ressources graphiques sont inaccessibles");}	}/**	* Initialisation du Thread*//*	public void init() {		System.out.println("init");		if((monThread != null)&&(monThread.isAlive())) {			monThread.start();		}		else {			Thread monThread = new Thread(this);			monThread.setPriority(monThread.getPriority()-1);			monThread.start();		//}	}*//**	* Calcul le facteur (float) de reduction pour les thumbnails*/	protected float calcFactor(Image img) {		float factor;		int w = img.getWidth(this);		int h = img.getHeight(this);		if(w > h) factor = ((float) width/(float) w);		else factor = ((float) height/(float) h);		return factor;	}/**	* Surchargée, déclenchée de man?re asynchrone	* Pour info, flags de la classe ImageObserver	* ABORT 128	* ALLBITS 32	* ERROR 64	* FRAMEBITS 16	* HEIGHT 2	* PROPERTIES 4	* SOMEBITS 8	* WIDTH 1*/	public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {		if((infoflags >= 32)&&(infoflags < 64)) {// HEIGHT et WIDTH connus			updateThumb(img);		}		if(infoflags >= 64) {// ERROR			//updateThumb(Ressources.getStaticImage("Invalidelogo.jpg"));			if(iReceiver!= null) iReceiver.imageReady(null, nomFich, index, true);			//creerImageLogo(nomFich);		}		return super.imageUpdate(img, infoflags, x, y, width, height);	}/**	* Pour créer un logo erreur*///	public void creerImageLogo(String nomFichier, int type) {/*		if((nomFichier.indexOf(".mov")!=-1)||(nomFichier.indexOf(".mp3")!=-1)) {			updateThumb(rl.getImage("QTlogo.jpg"));		}		else {			if(nomFichier.indexOf(".swf")!=-1) {				updateThumb(rl.getImage("Flash.jpg"));			}			else {				invalide = true;				updateThumb(rl.getImage("Invalide.gif"));			}		}	}*//**	* Permet de créer une image réduite à partir d'une image*/	public Image creerImageReduite(Image img) throws NullPointerException {         	//System.out.println("largeur = "+img.getWidth(this)+", hauteur = "+img.getHeight(this));		if((img.getWidth(this)==width)&&(img.getHeight(this)<=height)) {			//System.out.println("bonne taille en Width");			return img;// Pas besoin de calculer une image réduite si la source est de la bonne taille		}		if((img.getHeight(this)==height)&&(img.getWidth(this)<=width)) {			//System.out.println("bonne taille en Height");			return img;// Pas besoin de calculer une image réduite si la source est de la bonne taille		}		float factor = calcFactor(img);		int ws = (int) (factor*(float) img.getWidth(this));		int hs = (int) (factor*(float) img.getHeight(this));		imgRed = img.getScaledInstance(ws, hs, qualite ? Image.SCALE_SMOOTH : Image.SCALE_DEFAULT);		return imgRed;	}/**	* Mise à jour (asynchrone) du Thumb*/	public void updateThumb(Image img) throws NullPointerException {	//System.out.println("updateThumb 1 :"+thisnbThumb);		//System.out.println("updateThumb");		if(! calcImg) {		//System.out.println("updateThumb 2 :"+thisnbThumb);			calcImg = true;			imgRed = creerImageReduite(img);			if(imgRed.getHeight(this)>0) updateThumb(imgRed);		}		else {		//System.out.println("updateThumb 3 :"+thisnbThumb);		  if(! calcImgRed) {		  	calcImgRed = true;		  	if(iReceiver!=null) iReceiver.imageReady(imgRed, nomFich, index, invalide);		  	if((rl != null)&&(path != null)) rl.put(path, imgRed);		  	//monThread.stop();		  	//if(index != -1) iReceiver.imageReady(imgRed, nomFich, index, invalide);		  	//else iReceiver.imageReady(imgRed, nomFich, invalide);		  }		}	}}