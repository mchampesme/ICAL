/*
 ***********************************************************************
 * Copyright (C) 2004 The Galicia Team 
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA; or visit the following url:
 * http://www.gnu.org/copyleft/lesser.html
 *
 ***********************************************************************
 */

package lattice.gui.controller;// import javaimport java.awt.event.ActionEvent;
import java.util.Vector;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import lattice.gui.RelationalContextEditor;
import lattice.util.relation.RelationBuilder;
import lattice.util.relation.MatrixBinaryRelationBuilder;
import lattice.util.relation.ScalingBinaryRelation;
import rule.task.InformativeBasisTask;
import rule.task.LuxenburgerTask;
import rule.task.PasquierTask;
import rule.task.VNATask;
public class RuleControllerextends AbstractController {		JMenu menuRules;	JMenuItem luxemburgerAlgo;	JMenuItem diattaAlgo;	JMenuItem infBaseAlgo;	JMenuItem genBaseAlgo;	JMenuItem duquenneAlgo;	JMenuItem ValtchevNAlAlgo;		private InformativeBasisTask taskBaseInformative = null;	private PasquierTask taskPasquier = null;	private LuxenburgerTask taskLuxembourg = null;	private VNATask taskVNA = null;		// Constructeur	public RuleController(RelationalContextEditor rce) {		super(rce);		taskBaseInformative = new InformativeBasisTask(rce);		taskPasquier = new PasquierTask(rce);		taskLuxembourg = new LuxenburgerTask(rce);		taskVNA = new VNATask(rce);		initMenuRules();	}		private JMenu initMenuRules() {		// Les Menu et Sous Menu				menuRules = new JMenu("Rules Generation");		menuRules.setMnemonic('R');		JMenu menuExactRules = new JMenu("Generate Exact Rules");		menuExactRules.setMnemonic('G');		JMenu menuApproxRules = new JMenu("Approximative Rules");		menuApproxRules.setMnemonic('A');		JMenu menuBothRules = new JMenu("Generate Both Basis");		menuExactRules.setMnemonic('B');				// Les Items		luxemburgerAlgo = new JMenuItem("Luxemburger");		luxemburgerAlgo.addActionListener(this);		luxemburgerAlgo.setAccelerator(				javax.swing.KeyStroke.getKeyStroke(						java.awt.event.KeyEvent.VK_F1,						java.awt.event.KeyEvent.CTRL_MASK,						false));		menuApproxRules.add(luxemburgerAlgo);				diattaAlgo = new JMenuItem("Diatta Algorithm");		diattaAlgo.addActionListener(this);		diattaAlgo.setAccelerator(				javax.swing.KeyStroke.getKeyStroke(						java.awt.event.KeyEvent.VK_F4,						java.awt.event.KeyEvent.CTRL_MASK,						false));		menuBothRules.add(diattaAlgo);				infBaseAlgo = new JMenuItem("Informative Basis");		infBaseAlgo.addActionListener(this);		infBaseAlgo.setAccelerator(				javax.swing.KeyStroke.getKeyStroke(						java.awt.event.KeyEvent.VK_F2,						java.awt.event.KeyEvent.CTRL_MASK,						false));		menuApproxRules.add(infBaseAlgo);				duquenneAlgo = new JMenuItem("Duquenne Guiges");		duquenneAlgo.addActionListener(this);		duquenneAlgo.setAccelerator(				javax.swing.KeyStroke.getKeyStroke(						java.awt.event.KeyEvent.VK_F3,						java.awt.event.KeyEvent.CTRL_MASK,						false));		menuExactRules.add(duquenneAlgo);				genBaseAlgo = new JMenuItem("Generic Basis");		genBaseAlgo.addActionListener(this);		genBaseAlgo.setAccelerator(				javax.swing.KeyStroke.getKeyStroke(						java.awt.event.KeyEvent.VK_F5,						java.awt.event.KeyEvent.CTRL_MASK,						false));		menuExactRules.add(genBaseAlgo);				ValtchevNAlAlgo = new JMenuItem("Valtchev & al Algorithm");		ValtchevNAlAlgo.addActionListener(this);		/*ValtchevNAlAlgo.setAccelerator(		 javax.swing.KeyStroke.getKeyStroke(		 java.awt.event.KeyEvent.VK_F5,		 java.awt.event.KeyEvent.CTRL_MASK,		 false));*/		menuBothRules.add(ValtchevNAlAlgo);				// Ajout des Items		menuRules.add(menuExactRules);		menuRules.add(menuApproxRules);		menuRules.add(menuBothRules);				//menuOperation.add(algoValMerge);		//menuAlgo.add(menuOperation);		return menuRules;	}		public JMenu getMainMenu() {		return menuRules;	}		public void actionPerformed(ActionEvent evt) {		if (evt.getSource() == luxemburgerAlgo) {			if (!fillTaskLuxembourgParameters()) {				rce.addMessage("Operation Canceled !! \n");				return;			}			rce.setWorkOnRelation( (MatrixBinaryRelationBuilder) rce.getSelectedRelation()); // marquer la relation 'On Use'			Vector binRelOnUse = new Vector();			binRelOnUse.add( (MatrixBinaryRelationBuilder) rce.getSelectedRelation());			taskLuxembourg.setBinRelOnUse(binRelOnUse);			taskLuxembourg.exec();		}		if (evt.getSource() == infBaseAlgo) {			if (!fillTaskBaseInformativeParameters()) {				rce.addMessage("Operation Canceled !! \n");				return;			}			rce.setWorkOnRelation( (MatrixBinaryRelationBuilder) rce.getSelectedRelation()); // marquer la relation 'On Use'			Vector binRelOnUse = new Vector();			binRelOnUse.add( (MatrixBinaryRelationBuilder) rce.getSelectedRelation());			taskBaseInformative.setBinRelOnUse(binRelOnUse);			taskBaseInformative.exec();		}		if (evt.getSource() == genBaseAlgo) {			if (!fillTaskPasquierParameters()) {				rce.addMessage("Operation Canceled !! \n");				return;			}			rce.setWorkOnRelation( (MatrixBinaryRelationBuilder) rce.getSelectedRelation()); // marquer la relation 'On Use'			Vector binRelOnUse = new Vector();			binRelOnUse.add( (MatrixBinaryRelationBuilder) rce.getSelectedRelation());			taskPasquier.setBinRelOnUse(binRelOnUse);			taskPasquier.exec();		}		if (evt.getSource() == duquenneAlgo) {			addMessage("Duquenne-Guiges Algorithm is accessible from: Rules Generation > Generate Both Basis > Diatta Algorithm!\n");		}		if (evt.getSource() == ValtchevNAlAlgo) {			if (!fillTaskVNAParameters()) {				rce.addMessage("Operation Cancelled! \n");				return;			}						rce.setWorkOnRelation( (MatrixBinaryRelationBuilder) rce.getSelectedRelation()); // marquer la relation 'On Use'			Vector binRelOnUse = new Vector();			binRelOnUse.add( (MatrixBinaryRelationBuilder) rce.getSelectedRelation());			taskVNA.setBinRelOnUse(binRelOnUse);						taskVNA.exec();		}				rce.checkPossibleActions();	}		private boolean fillTaskLuxembourgParameters() {		String numString = null;		/*do {		 // Demander un support minimum		  numString = JOptionPane.showInputDialog(rce,		  "Give a minimum support threshold \n (default 0.5)", "0.5");		  if (numString != null) {		  if (!numString.equals("")) {		  try {		  taskLuxembourg.setMinSupport(Double.parseDouble(numString));		  }		  catch (NumberFormatException nfe) {		  taskLuxembourg.setMinSupport( -1d);		  }		  }		  else		  taskLuxembourg.setMinSupport(0.5d);		  if (taskLuxembourg.getMinSupport() < 0d ||		  taskLuxembourg.getMinSupport() > 1d) {		  JOptionPane.showMessageDialog(rce,		  "The input should be : 0 <= support <= 1");		  }		  }		  }		  while (numString != null &&		  (taskLuxembourg.getMinSupport() < 0d ||		  taskLuxembourg.getMinSupport() > 1d));		  if (numString == null)		  return false;*/		do {			// Demander une confiance minimum			numString = JOptionPane.showInputDialog(rce,					"Give a minimum confidence threshold \n (default 0.5)", "0.5");			if (numString != null) {				if (!numString.equals("")) {					try {						taskLuxembourg.setMinConfiance(Double.parseDouble(numString));					}					catch (NumberFormatException nfe) {						taskLuxembourg.setMinConfiance( -1d);					}				}				else					taskLuxembourg.setMinConfiance(0.5d);				if (taskLuxembourg.getMinConfiance() < 0d ||						taskLuxembourg.getMinConfiance() > 1d) {					JOptionPane.showMessageDialog(rce,					"The input should be : 0 <= confiance <= 1");				}			}		}		while (numString != null &&				(taskLuxembourg.getMinConfiance() < 0d ||						taskLuxembourg.getMinConfiance() > 1d));		if (numString == null)			return false;				//	int result = 0;		//	result = JOptionPane.showConfirmDialog(rce,		//										   "The database name is: " +		//										   rce.getSelectedRelation().getRelationName());		//	if (result == JOptionPane.OK_OPTION) {		//	  taskLuxembourg.setNomFichierEntre(rce.getSelectedRelation().		//										getRelationName());		//	}		//	if (result == JOptionPane.NO_OPTION) {		//	  String databaseName = null;		//	  do {		//		databaseName = JOptionPane.showInputDialog(rce,		//			"Give a Name for the Database",		//			rce.getSelectedRelation().getRelationName());		//		if (databaseName == null)		//		  return false;		//	  }		//	  while (databaseName.equals(""));		//	  taskLuxembourg.setNomFichierEntre(databaseName);		//	}		//	if (result == JOptionPane.CANCEL_OPTION) {		//	  return false;		//	}		//		//	JFileChooser chooser = new JFileChooser();		//	chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);		//	chooser.setMultiSelectionEnabled(false);		//	result = JFileChooser.CANCEL_OPTION;		//		//	chooser.setDialogTitle("Select the Output File for Approximative Rules");		//	result = chooser.showSaveDialog(rce);		//	if (result == JFileChooser.CANCEL_OPTION)		//	  return false;		//	else		//	  taskLuxembourg.setNomFichierSauvegardeApprox(chooser.getSelectedFile().		//		  getAbsolutePath());		return true;	}		private boolean fillTaskBaseInformativeParameters() {		String numString = null;		do {			//		Demander un support minimum			numString = JOptionPane.showInputDialog(rce,					"Give a minimum support threshold \n (default 0.5)", "0.5");			if (numString != null) {				if (!numString.equals("")) {					try {						taskBaseInformative.setMinSupport(Double.parseDouble(numString));					}					catch (NumberFormatException nfe) {						taskBaseInformative.setMinSupport( -1d);					}				}				else					taskBaseInformative.setMinSupport(0.5d);				if (taskBaseInformative.getMinSupport() < 0d ||						taskBaseInformative.getMinSupport() > 1d) {					JOptionPane.showMessageDialog(rce,					"The input should be : 0 <= support <= 1");				}			}		}		while (numString != null &&				(taskBaseInformative.getMinSupport() < 0d ||						taskBaseInformative.getMinSupport() > 1d));		if (numString == null)			return false;				// Demander une confiance minimum		numString = JOptionPane.showInputDialog(rce,				"Give a minimum confidence threshold \n (default 0.5)", "0.5");		if (numString != null) {			if (!numString.equals("")) {				try {					taskBaseInformative.setMinConfiance(Double.parseDouble(numString));				}				catch (NumberFormatException nfe) {					taskBaseInformative.setMinConfiance( -1d);				}			}			else				taskBaseInformative.setMinConfiance(0.5d);			if (taskBaseInformative.getMinConfiance() < 0d || taskBaseInformative.getMinConfiance() > 1d) {				JOptionPane.showMessageDialog(rce,				"The input should be : 0 <= confiance <= 1");			}		}		while (numString != null &&				(taskBaseInformative.getMinConfiance() < 0d || taskBaseInformative.getMinConfiance() > 1d));		if (numString == null)			return false;		//		int result = 0;//		result = JOptionPane.showConfirmDialog(rce,//				"The database name is: " +//				rce.getSelectedRelation().getRelationName());//		if (result == JOptionPane.OK_OPTION) {//			taskBaseInformative.setNomFichierEntre(rce.getSelectedRelation().getRelationName());//		}//		if (result == JOptionPane.NO_OPTION) {//			String databaseName = null;//			do {//				databaseName = JOptionPane.showInputDialog(rce,//						"Give a Name for the Database",//						rce.getSelectedRelation().getRelationName());//				if (databaseName == null)//					return false;//			}//			while (databaseName.equals(""));//			taskBaseInformative.setNomFichierEntre(databaseName);//		}//		if (result == JOptionPane.CANCEL_OPTION) {//			return false;//		}//		//		JFileChooser chooser = new JFileChooser();//		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);//		chooser.setMultiSelectionEnabled(false);//		result = JFileChooser.CANCEL_OPTION;//		//		chooser.setDialogTitle("Select the Output File for Approximative Rules");//		result = chooser.showSaveDialog(rce);//		if (result == JFileChooser.CANCEL_OPTION)//			return false;//		else//			taskBaseInformative.setNomFichierSauvegardeApprox(chooser.getSelectedFile().//					getAbsolutePath());				return true;	}		private boolean fillTaskPasquierParameters() {		String numString = null;		do {			// Demander un support minimum			numString = JOptionPane.showInputDialog(rce,					"Give a minimum support threshold \n (default 0.5)", "0.5");			if (numString != null) {				if (!numString.equals("")) {					try {						taskPasquier.setMinSupport(Double.parseDouble(numString));					}					catch (NumberFormatException nfe) {						taskPasquier.setMinSupport( -1d);					}				}				else					taskPasquier.setMinSupport(0.5d);				if (taskPasquier.getMinSupport() < 0d ||						taskPasquier.getMinSupport() > 1d) {					JOptionPane.showMessageDialog(rce,					"The input should be : 0 <= support <= 1");				}			}		}		while (numString != null &&				(taskPasquier.getMinSupport() < 0d ||						taskPasquier.getMinSupport() > 1d));		if (numString == null)			return false;		//		int result = 0;//		result = JOptionPane.showConfirmDialog(rce,//				"The database name is: " +//				rce.getSelectedRelation().getRelationName());//		if (result == JOptionPane.OK_OPTION) {//			taskPasquier.setNomFichierEntre(rce.getSelectedRelation().getRelationName());//		}//		if (result == JOptionPane.NO_OPTION) {//			String databaseName = null;//			do {//				databaseName = JOptionPane.showInputDialog(rce,//						"Give a Name for the Database",//						rce.getSelectedRelation().getRelationName());//				if (databaseName == null)//					return false;//			}//			while (databaseName.equals(""));//			taskPasquier.setNomFichierEntre(databaseName);//		}//		if (result == JOptionPane.CANCEL_OPTION) {//			return false;//		}//		//		JFileChooser chooser = new JFileChooser();//		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);//		chooser.setMultiSelectionEnabled(false);//		result = JFileChooser.CANCEL_OPTION;//		//		chooser.setDialogTitle("Select the Output File for Exact Rules");//		result = chooser.showSaveDialog(rce);//		if (result == JFileChooser.CANCEL_OPTION)//			return false;//		else//			taskPasquier.setNomFichierSauvegardeExact(chooser.getSelectedFile().//					getAbsolutePath());				return true;	}		private boolean fillTaskVNAParameters() {		Object[] lesVals = {				"Only Exact", "Only Approximative", "Both Exact & Approximative (Default)"};		String val =			(String) JOptionPane.showInputDialog(					rce,					"",					"Which kind of rule do you want ?",					JOptionPane.QUESTION_MESSAGE,					null,					lesVals,					lesVals[2]);		if (val == null)			return false;		if (val.equals(lesVals[0]))			taskVNA.setChoix("0");		if (val.equals(lesVals[1]))			taskVNA.setChoix("1");		if (val.equals(lesVals[2]))			taskVNA.setChoix("2");		if (taskVNA.getChoix().equals("1") || taskVNA.getChoix().equals("2")) {			String numString = null;			do {				// Demander une confiance minimum				numString = JOptionPane.showInputDialog(rce,						"Give a minimum confidence threshold \n (default 0.5)", "0.5");				if (numString != null) {					if (!numString.equals("")) {						try {							taskVNA.setMinConfiance(Double.parseDouble(numString));						}						catch (NumberFormatException nfe) {							taskVNA.setMinConfiance( -1d);						}					}					else						taskVNA.setMinConfiance(0.5d);					if (taskVNA.getMinConfiance() < 0d || taskVNA.getMinConfiance() > 1d) {						JOptionPane.showMessageDialog(rce,						"The input should be : 0 <= confiance <= 1");					}				}			}			while (numString != null &&					(taskVNA.getMinConfiance() < 0d || taskVNA.getMinConfiance() > 1d));			if (numString == null)				return false;		}		//		int result = 0;//		result = JOptionPane.showConfirmDialog(rce,//				"The database name is: " +//				rce.getSelectedRelation().getRelationName());//		if (result == JOptionPane.OK_OPTION) {//			taskVNA.setNomFichierEntre(rce.getSelectedRelation().getRelationName());//		}//		if (result == JOptionPane.NO_OPTION) {//			String databaseName = null;//			do {//				databaseName = JOptionPane.showInputDialog(rce,//						"Give a Name for the Database",//						rce.getSelectedRelation().getRelationName());//				if (databaseName == null)//					return false;//			}//			while (databaseName.equals(""));//			taskVNA.setNomFichierEntre(databaseName);//		}//		if (result == JOptionPane.CANCEL_OPTION) {//			return false;//		}//		//		JFileChooser chooser = new JFileChooser();//		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);//		chooser.setMultiSelectionEnabled(false);//		result = JFileChooser.CANCEL_OPTION;//		//		if (taskVNA.getChoix().equals("0") || taskVNA.getChoix().equals("2")) {//			chooser.setDialogTitle("Select the Output File for Exact Rules");//			result = chooser.showSaveDialog(rce);//			if (result == JFileChooser.CANCEL_OPTION)//				return false;//			else//				taskVNA.setNomFichierSauvegardeExact(chooser.getSelectedFile().//						getAbsolutePath());//		}//		//		if (taskVNA.getChoix().equals("1") || taskVNA.getChoix().equals("2")) {//			chooser.setDialogTitle("Select the Output File for Approximative Rules");//			result = chooser.showSaveDialog(rce);//			if (result == JFileChooser.CANCEL_OPTION)//				return false;//			else//				taskVNA.setNomFichierSauvegardeApprox(chooser.getSelectedFile().//						getAbsolutePath());//		}				return true;	}		public void checkPossibleActions() {				if (rce.getFamilyContexts().size() == 0) {			menuRules.setEnabled(false);			return;		}				RelationBuilder absRel = rce.getSelectedRelation();				if (absRel instanceof MatrixBinaryRelationBuilder) {			menuRules.setEnabled(true);			if (rce.isOnWork(absRel))				menuRules.setEnabled(false);			return;		}				if (absRel instanceof ScalingBinaryRelation) {			menuRules.setEnabled(false);			return;		}			}}