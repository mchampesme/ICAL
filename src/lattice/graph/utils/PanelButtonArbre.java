/*
 ***********************************************************************
 * Copyright (C) 2004 The Galicia Team 
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA; or visit the following url:
 * http://www.gnu.org/copyleft/lesser.html
 *
 ***********************************************************************
 */

package lattice.graph.utils;/**	* IKBS - Editeur de mod?le	* Définition de PanelButtonArbre, sous classe de Panel	* Version 1.0	* David Grosser - 24 Février 1998*/// import javaimport java.awt.Color;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Label;import java.awt.Panel;import java.awt.event.ActionEvent;import lattice.graph.imageButton.ImageButton;public class PanelButtonArbre extends IkbsPanel implements InfoListener {// Variables de classe	static final String nomImages[] = {	"regard.gif", "save.gif", "load.gif",										"loadDist.gif", "formSimpl.gif", "formEqui.gif", "graphe.gif",										"formVert.gif", "zoom+.gif", "zoom-.gif", "zoom.gif",										"attribut.gif", "edition.gif", "frflag.gif", "usgbflag.gif"};	Resources ressources;	ImageButton	buttonzoom, buttonAttribut, buttonEdition, buttonFrancais, buttonAnglais;	//ImageButton buttonVisualiser;	EditeurArbreInterface parent;	ArbreAdapter pba;	private Label comm = new Label("");	InfoListener il; // Le gestionnaire d'information	// Constructeur	public PanelButtonArbre(EditeurArbreInterface parent) {		//super(WITHOUT_RIGHT, 0, 29) ;		super() ;		this.parent = parent;		init();	}	// Constructeur	public PanelButtonArbre(EditeurArbreInterface parent, InfoListener il) {		//super(WITHOUT_RIGHT, 0, 29) ;		super() ;		this.parent = parent;		setInfoListener(il);		init();	}	public void setInfoListener(InfoListener il) {		this.il = il;	}	protected void initRessources() {		ressources = new Resources(this);		//ressources.defautJarDirectory = "ikbs/ressources/illustration";		ressources.defautJarDirectory = "ikbs/ressources";		ressources.setAcces(Resources.FROM_JAR);		ressources.setLocal(false);		ressources.wait = true;		try{			ressources.init(nomImages);		}catch(Exception e) {System.out.println("Probl?me d'acc?s aux ressources (PanelButonIllu)");}	}	public void init() {		initRessources();		initGridBagConstraint();		c.insets=new Insets(0, 0, 0, 0);		setBackground(new Color(230, 230, 230));		pba = new ArbreAdapter(0, parent);// Définition du panel visualiser		Panel pVisu = new Panel();		pVisu.setLayout(new GridBagLayout());		ImageButton iReg = new ImageButton(ressources.getImage("regard.gif"), this, ArbreAdapter.AFFICHER_WEB);		iReg.setInfo("Lien Web");		xyPosition(pVisu, iReg, 0, 0, 1);// Définition des Panels de gestion de fichiers		Panel pFich = new Panel();		pFich.setLayout(new GridBagLayout());		ImageButton iLoad = new ImageButton(ressources.getImage("load.gif"), this, ArbreAdapter.LOAD);		iLoad.setInfo("Charger un mod?le");		xyPosition(pFich, iLoad, 0, 0, 1);		ImageButton iSave = new ImageButton(ressources.getImage("save.gif"), this, ArbreAdapter.SAVE);		iSave.setInfo("Sauver le mod?le");		xyPosition(pFich, iSave, 0, 1, 1);		ImageButton iLoadDist = new ImageButton(ressources.getImage("loadDist.gif"), this, ArbreAdapter.LOAD_DIST);		iLoadDist.setInfo("Charger un mod?le via un URL");		xyPosition(pFich, iLoadDist, 0, 2, 1);// Définition du Panel formattage		Panel pForm = new Panel();		pForm.setLayout(new GridBagLayout());		ImageButton iSimple = new ImageButton(ressources.getImage("formSimpl.gif"), this, ArbreAdapter.FORME_SIMPLE);		iSimple.setInfo("Affichage simple de l'arbre");		xyPosition(pForm, iSimple, 0, 0, 1);		ImageButton iFormEqui = new ImageButton(ressources.getImage("formEqui.gif"), this, ArbreAdapter.FORME_EQUI);		iFormEqui.setInfo("Affichage équilibrée");		xyPosition(pForm, iFormEqui, 0, 1, 1);		ImageButton iFormVert = new ImageButton(ressources.getImage("formVert.gif"), this, ArbreAdapter.FORME_VERT);		iFormVert.setInfo("Affichage vertical");		xyPosition(pForm, iFormVert, 1, 0, 1);		ImageButton iGraphe = new ImageButton(ressources.getImage("graphe.gif"), this, ArbreAdapter.GRAPHE);		iGraphe.setInfo("Affichage de graphe");		xyPosition(pForm, iGraphe, 1, 1, 1);// Définition du Panel zoom		Panel pZoom = new Panel();		//pZoom.setLayout(new FlowLayout(FlowLayout.LEFT, 1, 0));		pZoom.setLayout(new GridBagLayout());		ImageButton iZoomMoins = new ImageButton(ressources.getImage("zoom-.gif"), this, ArbreAdapter.ZOOM_MOINS);		iZoomMoins.setInfo("Affichage plus petit");		xyPosition(pZoom, iZoomMoins, 0, 0, 1);		ImageButton iZoomPlus = new ImageButton(ressources.getImage("zoom+.gif"), this, ArbreAdapter.ZOOM_PLUS);		iZoomPlus.setInfo("Affichage plus grand");		xyPosition(pZoom, iZoomPlus, 1, 0, 1);		buttonzoom = new ImageButton(ressources.getImage("zoom.gif"), true, this, ArbreAdapter.ZOOM);		buttonzoom.setInfo("Ouvrir fen?tre de zoom");		xyPosition(pZoom, buttonzoom, 0, 1, 1);// Définition du Panel Attribut		Panel pAttribut = new Panel();		pAttribut.setLayout(new GridBagLayout());		buttonAttribut = new ImageButton(ressources.getImage("attribut.gif"), true, this, ArbreAdapter.AFF_ATT);		buttonAttribut.setInfo("Afficher les attributs");		buttonAttribut.setInfoSelect("Masquer les attributs");		xyPosition(pAttribut, buttonAttribut, 0, 0, 1);		buttonEdition = new ImageButton(ressources.getImage("edition.gif"), true, this, ArbreAdapter.EDITION);		buttonEdition.setInfo("Passer en mode édition");		buttonEdition.setInfoSelect("Passer en mode visualisation");		xyPosition(pAttribut, buttonEdition, 1, 0, 1);// Définition du panel langue		Panel pLangue = new Panel();		pLangue.setLayout(new GridBagLayout());		buttonFrancais = new ImageButton(ressources.getImage("frflag.gif"), false, this, ArbreAdapter.FRANCAIS);		buttonFrancais.setShowBorder(false);		buttonFrancais.setInfo("fran?ais choisit");		xyPosition(pLangue, buttonFrancais, 0, 0, 1);		buttonAnglais = new ImageButton(ressources.getImage("usgbflag.gif"), false, this, ArbreAdapter.ANGLAIS);		buttonAnglais.setInfo("Anglais choisit");		buttonAnglais.setShowBorder(false);		xyPosition(pLangue, buttonAnglais, 0, 1, 1);// Mise en place des panels		c.insets=new Insets(3, 2, 1, 3);		setLayout(new GridBagLayout());		//xyPosition(this, buttonLogo, 0, 0, GridBagConstraints.REMAINDER);		xyPosition(this, pVisu, 0, 0, 1);		xyPosition(this, pFich, 0, 1, 1);		xyPosition(this, pZoom, 0, 2, 1);		xyPosition(this, pForm, 0, 3, 1);		xyPosition(this, pAttribut, 0, 4, 1);		//xyPosition(this, pLangue, 0, 5, 1);		xyPosition(this, comm, 0, 6, 1);		//validate();	} // fin init	public void upddateButtonAttribut(boolean b) {		buttonAttribut.setSelected(b);	}	public void upddateButtonMode(boolean b) {		buttonEdition.setSelected(b);	}	public void updateButtonZoomViewer(boolean b) {		buttonzoom.setSelected(b);	}/**	* Implémente InfoListener*/	public void setInfo(String info) {		if(il != null) il.setInfo(info);		else comm.setText(info);	}/**	* Implémente InfoListener*/	public void removeInfo() {		if(il != null) il.removeInfo();		else comm.setText("");	}/**	* Transmission de l'action au panel*/	public void actionPerformed(ActionEvent e) {		pba.actionPerformed(e);	}}