/*
 ***********************************************************************
 * Copyright (C) 2004 The Galicia Team 
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA; or visit the following url:
 * http://www.gnu.org/copyleft/lesser.html
 *
 ***********************************************************************
 */

package lattice.graph.trees.event;// import java.awt.eventimport java.awt.Cursor;import java.awt.Rectangle;import java.awt.event.InputEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import lattice.graph.trees.ActionGraphViewer;import lattice.graph.trees.Attribut;import lattice.graph.trees.ComponentPopUp;import lattice.graph.trees.Noeud;import lattice.graph.trees.Selectable;/** * Pour gérer les actions souris sur le GraphViewer */public class ActionGraphViewerAdapter extends MouseAdapter {	public static final int META = 20; // Touche pomme	public static final int CTRL = 18; // Touche CTRL	public static final int ALT =  24; // Touche ALT	public static final int SHIFT =  17; // Touche ALT	public static final int CTRLSHIFT =  19; // Touche CTRL+SHIFT	public static final int NORMAL = 16; // Touche Normal	public static final int SHIFTALT = 25; // Touches SHIFT + ALT	protected ActionGraphViewer graphEditor;	protected int index;	protected Attribut a;	protected int x,y;	public ActionGraphViewerAdapter(ActionGraphViewer ac) {		graphEditor = ac;	}	//public void mouseClicked(MouseEvent e) {	//}	public void mousePressed(MouseEvent e) {		graphEditor.requestFocus();		graphEditor.setCursor(new Cursor(Cursor.MOVE_CURSOR));//le curseur prend la forme d'une main		x = e.getX(); // La position en x du clic		y = e.getY(); // La position en y du clic		//graphEditor.pos.x = x;		//System.out.println("clic à la position :"+x+" , "+y);		graphEditor.setPosClic(x, y);		//graphEditor.pos.y = y;		index = graphEditor.rechNoeud(x, y); // L'index du noeud		if(index != -1) { // On clic dans l'environnement d'un noeud			graphEditor.setIndex(index);			a = graphEditor.attributAt(index, x, y);			if(a != null) {//on clic sur un attribut du noeud				attributClicked(x, y, e);			}			else {//on clic sur le noeud				Rectangle rect3 = graphEditor.noeuds(index).rect3();				if ((rect3 != null)&&(rect3.contains(x, y))) {graphEditor.affSousArbre();}				else {					if ((graphEditor.noeuds(index)).rect2().contains(x, y)) noeudClicked(x, y, e);					else canvasClicked(x, y, e);				}			}// fin else		}		else canvasClicked(x, y, e);	}	public int index() {		return index;	}	public Attribut attribut() {		return a;	}	public void mouseReleased(MouseEvent e) {		graphEditor.mouseUp(e.getX(), e.getY());	}/*	void noeudClicked(int x, int y, MouseEvent e) {		System.out.println(e);		System.out.println(e.getModifiers());		System.out.println(InputEvent.META_MASK);		System.out.println(InputEvent.SHIFT_MASK);		System.out.println(InputEvent.CTRL_MASK);		System.out.println(InputEvent.ALT_MASK);		switch(e.getModifiers()) {			case InputEvent.META_MASK: // Création d'une relation				graphEditor.createRelation(index());				break;			case InputEvent.SHIFT_MASK: // touche shift pressée : deplacement du sous arbre 				graphEditor.moveTree(index()); 				break; 			case InputEvent.CTRL_MASK: // touche controle pressée édite le noeud				graphEditor.getComponentPopUp().show(graphEditor, x, y);				//graphEditor.editNode(index);				break;			case InputEvent.CTRL_MASK + InputEvent.SHIFT_MASK:				graphEditor.eraseTree(index());				break;			case InputEvent.ALT_MASK:				graphEditor.rootOnNode(index());				break;			default:				graphEditor.selectNode(index());				break;		}	}*/	protected void noeudClicked(int x, int y, MouseEvent e) {		graphEditor.doSelected((Selectable) graphEditor.noeuds(index));		if(e.getClickCount() >= 2) {			if(e.getModifiers() == META) graphEditor.createRelation(index());			else graphEditor.editNode(index());		}		//if(e.getClickCount() > 2) graphEditor.editNode(index());		else switch(e.getModifiers()) {			case META: // Création d'une relation				graphEditor.createRelation(index());				break;			case InputEvent.BUTTON2_MASK:				graphEditor.createRelation(index());				break;			case SHIFT: // touche shift pressée : deplacement du sous arbre 				graphEditor.moveTree(index()); 				break; 			case InputEvent.SHIFT_MASK: 				graphEditor.moveTree(index()); 				break; 			case CTRL: // touche controle pressée édite le noeud				affPopUp();				break;			case SHIFTALT:				Noeud copy = graphEditor.copyTree(index());				graphEditor.moveTree(copy);				break;			case InputEvent.BUTTON3_MASK:				graphEditor.getComponentPopUp().show(graphEditor, x, y);				break;			case CTRLSHIFT:				graphEditor.eraseTree(index());				break;			case ALT:				graphEditor.copyNode(index());				//graphEditor.rootOnNode(index());				break;			default:				graphEditor.selectNode(index());				break;		}	}/**	* Affichage du ComponentPopUp associé à l'objet*/	protected void affPopUp() {		ComponentPopUp cp = graphEditor.getComponentPopUp();		cp.setLabelAtt(! (graphEditor.noeuds(index()).affAttributs()));		cp.setLabelFils(! (graphEditor.noeuds(index()).isFilsVisible()));		cp.show(graphEditor, x, y);	}/*	void attributClicked(int x, int y, MouseEvent e) {		graphEditor.setAttributSelect(a);		switch(e.getModifiers()) {			case InputEvent.ALT_MASK:				graphEditor.setAttributCible(a);				break;			case InputEvent.CTRL_MASK:				//graphEditor.editer(a, index);				graphEditor.getAttributPopUp().show(graphEditor, x, y);				break;			default:				graphEditor.attributClicked(a, index);				break;		}// fin switch	}*/	protected void attributClicked(int x, int y, MouseEvent e) {		//graphEditor.setAttributSelect(a);		graphEditor.doSelected(a);		if(e.getClickCount() == 2) graphEditor.editerAttribut();		else		switch(e.getModifiers()) {			case META: // Création d'une relation				graphEditor.createAttribute(index);				break;			case ALT:				//graphEditor.setAttributCible(a);				graphEditor.setCopyMode(true);				graphEditor.attributClicked(a, index);				break;			case InputEvent.BUTTON2_MASK:				//graphEditor.setAttributCible(a);				graphEditor.setCopyMode(true);				graphEditor.attributClicked(a, index);				break;			case CTRL:				//graphEditor.editer(a, index);				graphEditor.getAttributPopUp().show(graphEditor, x, y);				break;			case InputEvent.CTRL_MASK:				graphEditor.getAttributPopUp().show(graphEditor, x, y);				break;			case InputEvent.BUTTON3_MASK:				graphEditor.getAttributPopUp().show(graphEditor, x, y);				break;			default:				graphEditor.attributClicked(a, index);				break;		}// fin switch	}	protected void canvasClicked(int x, int y, MouseEvent e) {		switch(e.getModifiers()) {			case META:	// Création d'un noeud				graphEditor.createNode(x, y);				break;			case InputEvent.BUTTON2_MASK:				graphEditor.createNode(x, y);				break;			case CTRL:	// Ouverture du PopUpMenu				graphEditor.getCanvasPopUp().show(graphEditor, x, y);				break;			case InputEvent.CTRL_MASK:				graphEditor.getCanvasPopUp().show(graphEditor, x, y);				break;			case InputEvent.BUTTON3_MASK:				graphEditor.getCanvasPopUp().show(graphEditor, x, y);				break;			default:				graphEditor.dragMode();				break;		}// fin switch	}	public void mouseEntered(MouseEvent e) {		//graphEditor.requestFocus();	}	//public void mouseExited(MouseEvent e) {	//}}