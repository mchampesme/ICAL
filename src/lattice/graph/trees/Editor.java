/*
 ***********************************************************************
 * Copyright (C) 2004 The Galicia Team 
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA; or visit the following url:
 * http://www.gnu.org/copyleft/lesser.html
 *
 ***********************************************************************
 */

package lattice.graph.trees;//import java.awt;import java.awt.BorderLayout;import java.awt.Button;import java.awt.Component;import java.awt.Container;import java.awt.Dimension;import java.awt.Frame;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Menu;import java.awt.MenuBar;import java.awt.MenuItem;import java.awt.Toolkit;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.util.Observable;import java.util.Observer;import lattice.graph.imageButton.ImageButton;import lattice.graph.trees.event.EditorAdapter;import lattice.graph.utils.Resources;/**	* IKBS tools - Package graphique pour la gestion d'arbres et de graphes	* Editeur est la classe générique de plus haut niveau de la hiérarchie des Editeurs d'IKBS	* Elle implémente une barre de Menu et des méthodes pratiques de mise en forme des composants qu'elle contient	* basé sur des GridBagLayout	* @version 2.2 (mod?le évenementiel awt 1.1)	* @author David Grosser	* @date 30 Avril 1997	* @since 18 Février 1998*/public class Editor extends Frame implements WindowListener, Observer {	public static String adresse_manuel = "aide/IKBSMan.html";/**	* La barre de menu de tout Editeur*/	public MenuBar menuBar;/**	* Le GridBagConstraints permettant la mise en forme des différents GridBagLayout*/	public GridBagConstraints c;/**	* Pour créer un nouvel éditeur avec une barre de menu	* @param nom le nom de la fen?tre*/	public Editor(String nom) {		super(nom);		initBarreMenu();		initHelpMenu(); // Le menu d'aide et d'information		//addWindowListener(this);		init();	}/**	* Initialisation de l'éditeur	* Méthode abstraite destinée à ?tre surchargée par les sous-classes*/		public void init() {			addWindowListener(this); //le window listener pour les actions sur la fen?tre (fermeture, etc.)		}/**	* Initialisation de la barre de Menu*/		protected void initBarreMenu() {			menuBar = new MenuBar();		}/**	* Initialisation des menus*/		public void initMenu() {		}/**	* initialisation de l'interface des editeurs*/		public void initEditor() {		}/**	* Initialisation du menu d'aide*/		void initHelpMenu() {			Menu about = new Menu("A propos");			about.add(new MenuItem("A propos d'IKBS"));			about.addActionListener(new EditorAdapter(EditorAdapter.A_PROPOS, this));			menuBar.setHelpMenu(about);		}// Implements WindowEvent		public void windowClosing(WindowEvent event) {			dispose();		}		// Implements WindowListener, mais non géré		public void windowActivated(WindowEvent event) {		}		// Implements WindowListener, mais non géré		public void windowClosed(WindowEvent event) {			//System.out.println(event);		}		// Implements WindowListener, mais non géré		public void windowDeactivated(WindowEvent event) {		}		// Implements WindowListener, mais non géré		public void windowDeiconified(WindowEvent event) {		}		// Implements WindowListener, mais non géré		public void windowIconified(WindowEvent event) {		}		// Implements WindowListener, mais non géré		public void windowOpened(WindowEvent event) {		}/**	* @return this*/	public Frame getFrame() {		return this;	}	public void afficherAPropos() {		Resources rl = new Resources(this);		rl.setAcces(Resources.FROM_JAR);		try {			rl.init("aPropos.gif");		}catch(Exception exc) {System.out.println("Erreur de chargement des images");}		ImageButton buttonImage = new ImageButton(rl.getImage("aPropos.gif"), new EditorAdapter(EditorAdapter.NULL, this), EditorAdapter.NULL);		buttonImage.setShowBorder(false);		Button lienAide = new Button("Aide : Manuel de l'utilisateur");		lienAide.addActionListener(new EditorAdapter(EditorAdapter.MANUEL, this));		Editor f = new Editor("A propos d'IKBS...");		f.setLayout(new BorderLayout(0,0));		f.add("Center", buttonImage);		f.add("South", lienAide);		f.pack();		f.show();	}	public void afficherAide() {		Resources.showDocument(adresse_manuel);	}/**	* inittialise le GridBagConstraint*/	protected void initGridBagConstraint() {		c = new GridBagConstraints();		c.ipadx = 0;		c.ipady = 0;		c.gridheight=1;		c.fill=GridBagConstraints.BOTH;		c.weightx=0.5; c.weighty=0.5;		c.anchor=GridBagConstraints.CENTER;		c.insets=new Insets(2, 2, 2, 2);	}/**	* Pour positionner correctement les composants dans le container	* @param conteneur le container dans lequel on rajoute l'élément	* @param element le composant à rajouter	* @param x la coordonnée x (ligne) ou l'on souhaite positionner le composant	* @param y la coordonnée y (colonne) ou l'on souhaite positionner le composant	* @param gridwidth permet de calculer l'occupation de place du composant (voir GridBagConstraint.gridwidth)*/	public void xyPosition(Container conteneur, Component element, int x, int y, int gridwidth)	{		if (c==null) initGridBagConstraint();		c.gridx=x; c.gridy=y;		c.gridwidth = gridwidth;		((GridBagLayout) conteneur.getLayout()).setConstraints(element, c);		conteneur.add(element);	}/**	* Pour positionner correctement les composants dans le container	* @param conteneur le container dans lequel on rajoute l'élément	* @param element le composant à rajouter	* @param x la coordonnée x (ligne) ou l'on souhaite positionner le composant	* @param y la coordonnée y (colonne) ou l'on souhaite positionner le composant	* @param gridwidth permet de calculer l'occupation de place du composant (voir GridBagConstraint.gridwidth)	* @param weightx permet de calculer le poid relatif du composant (voir GridBagConstraint.weightx)*/	public void xyPosition(Container conteneur, Component element, int x, int y, int gridwidth, double weightx)	{		if (c==null) initGridBagConstraint();		c.gridx=x; c.gridy=y;		c.gridwidth = gridwidth;		c.weightx=weightx;		((GridBagLayout) conteneur.getLayout()).setConstraints(element, c);		conteneur.add(element);		//c.weightx=0.5;	}/**	* Centrer une fen?tre à l'écran*/	public void centrer(Frame f) {		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();		int posX = ((screenSize.width - f.getSize().width)/2);		int posY = ((screenSize.height - f.getSize().height)/2);		f.setLocation(posX, posY);	}// Implémente Oberver	public void update(Observable o, Object args) {	}}// fin déclaration de la classe éditeur